{"version":3,"sources":["components/heading/heading.js","components/header/header.js","components/body-text/body-text.js","components/list/list.js","components/circle-cta/circle-cta.js","components/cta-list/cta-list.js","components/timeline/timeline.js","components/contact/contact.js","components/page/page.js","App.js","serviceWorker.js","index.js"],"names":["Heading","props","title","headingLevel","safeHeading","toLowerCase","Title","includes","className","Header","BodyText","description","List","listItems","items","map","item","url","href","CircleCTA","stat","CTAlist","CTAlistItems","Timeline","jobs","job","class","dates","company","Contact","image","ContactItems","src","alt","Page","data","bodyText","heading","project_items","heading_exp","cta_items","heading_skills","skill_items","contact","App","args","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a4cc41df.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./heading.scss\";\n\nexport const Heading = (props) => {\n  const { title, headingLevel } = props;\n  const validHeadingLevels = [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"];\n\n  const safeHeading = headingLevel ? headingLevel.toLowerCase() : \"\";\n  const Title = validHeadingLevels.includes(safeHeading) ? safeHeading : \"p\";\n\n  return <Title className=\"heading\">{title}</Title>;\n};\n\nHeading.propTypes = {\n  title: PropTypes.string,\n  heading: PropTypes.string,\n};\n","import React from 'react';\nimport { Heading } from '../heading/heading';\nimport './header.scss';\n\n\nexport const Header = () => (\n  <header>\n    <div className=\"header\">\n      <Heading\n        title = \"Madeline Jensen\"\n        headingLevel = \"h1\"\n      />\n    </div>\n  </header>\n);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./body-text.scss\";\n\nexport const BodyText = (props) => {\n  const { description } = props;\n  return <p className=\"body-text\">{description}</p>;\n};\n\nBodyText.propTypes = {\n  description: PropTypes.string.isRequired,\n};\n","import React from \"react\";\nimport \"./list.scss\";\n\nexport const List = (props) => {\n  const { items } = props;\n  const listItems = items.map((item) => (\n    <li>\n      {item.url ? (\n        <a href={`${item.url}`}>{item.title}</a>\n      ) : (\n        <span>{item.title}</span>\n      )}\n    </li>\n  ));\n  return <ul className=\"list\">{listItems}</ul>;\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./circle-cta.scss\";\n\nexport const CircleCTA = (props) => {\n  const { stat, description } = props;\n  return (\n    <div className=\"circle-cta\">\n      <div className=\"circle-cta--stat\">{stat}</div>\n      <div className=\"circle-cta--description\">{description}</div>\n    </div>\n  );\n};\n\nCircleCTA.propTypes = {\n  description: PropTypes.string.isRequired,\n  stat: PropTypes.string.isRequired,\n};\n","import React from \"react\";\nimport \"./cta-list.scss\";\nimport { CircleCTA } from \"../circle-cta/circle-cta\";\n\nexport const CTAlist = (props) => {\n  const { items } = props;\n  const CTAlistItems = items.map((item) => (\n    <CircleCTA stat={item.stat} description={item.description} />\n  ));\n  return <ul className=\"cta-list\">{CTAlistItems}</ul>;\n};\n","import React from \"react\";\nimport \"./timeline.scss\";\n\nexport const Timeline = (props) => {\n  const { jobs } = props;\n  const listItems = jobs.map((job) => (\n    <li class=\"timeline-item\">\n      <div class=\"timeline-info\">\n        <span>{job.dates}</span>\n      </div>\n      <div class=\"timeline-marker\"></div>\n      <div class=\"timeline-content\">\n        <h3 class=\"timeline-title\">{job.title}</h3>\n        <h3 class=\"timeline-company\">{job.company}</h3>\n        <p>{job.description}</p>\n      </div>\n    </li>\n  ));\n  return (\n    <ul class=\"timeline\">\n      <span> {listItems} </span>\n    </ul>\n  );\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./contact.scss\";\nimport { Heading } from \"../heading/heading\";\n\nexport const Contact = (props) => {\n  const { image, items } = props;\n  const ContactItems = items.map((item) => (\n    <li>\n      {item.url ? (\n        <a href={`${item.url}`}>{item.title}</a>\n      ) : (\n        <span>{item.title}</span>\n      )}\n    </li>\n  ));\n  return (\n    <div class=\"contact\">\n      <div class=\"contact--left\">\n        <img src={`${image}`} alt=\"Madeline Jensen\"/>\n      </div>\n      <div class=\"contact--right\">\n        <Heading title={\"Reach Out\"} headingLevel={\"h2\"} />\n        <ul>{ContactItems}</ul>\n      </div>\n    </div>\n  );\n};\n\nContact.propTypes = {\n  image: PropTypes.string.isRequired\n};\n","import React from \"react\";\nimport data from \"./data.json\";\nimport \"./page.scss\";\nimport { Header } from \"../header/header\";\nimport { Heading } from \"../heading/heading\";\nimport { BodyText } from \"../body-text/body-text\";\nimport { List } from \"../list/list\";\nimport { CTAlist } from \"../cta-list/cta-list\";\nimport { Timeline } from \"../timeline/timeline\";\nimport { Contact } from \"../contact/contact\";\n\nexport const Page = () => (\n  <>\n    <Header />\n    <div class=\"page-layout\">\n      <BodyText description={data.bodyText.description} />\n      <Heading\n        title={data.heading.title}\n        headingLevel={data.heading.headingLevel}\n      />\n      <List items={data.project_items} />\n      <Heading\n        title={data.heading_exp.title}\n        headingLevel={data.heading_exp.headingLevel}\n      />\n      <Timeline jobs={data.jobs} />\n      <CTAlist items={data.cta_items} />\n      <Heading\n        title={data.heading_skills.title}\n        headingLevel={data.heading_skills.headingLevel}\n      />\n      <List items={data.skill_items} />\n      <Contact image={data.contact.image} items={data.contact.items} />\n    </div>\n  </>\n);\n","import React from 'react';\nimport './style.scss';\nimport { Page } from './components/page/page';\n\nfunction App(args) {\n  return (\n    <Page {...args} />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}